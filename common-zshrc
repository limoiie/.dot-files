#!/bin/zsh

# zsh common configurations
setopt autocd              # change directory just by typing its name
#setopt correct            # auto correct mistakes
setopt interactivecomments # allow comments in interactive mode
setopt magicequalsubst     # enable filename expansion for arguments of the form ‘anything=expression’
setopt nonomatch           # hide error message if there is no match for the pattern
setopt notify              # report the status of background jobs immediately
setopt numericglobsort     # sort filenames numerically when it makes sense
setopt promptsubst         # enable command substitution in prompt

WORDCHARS=${WORDCHARS//\/} # Don't consider certain characters part of the word

# zsh prompt initialization
if [[ -z ${USE_STARSHIP_THEME} ]]; then
  local os_icon

  autoload -Uz promptinit
  promptinit
  prompt walters
  case `uname` in
    Darwin) os_icon=' ' ;;
    Linux) 
      case `awk -F= '/^ID=/{print $2}' /etc/os-release` in
        ubuntu) os_icon=' ' ;;
        kali) os_icon=' ' ;;
        arch) os_icon=' ' ;;
        *) os_icon='󰌽 ' ;;
      esac ;;
    *) os_icon='' ;;
  esac
  export PROMPT="${os_icon}%B%(?..[%? ])%b%# "
  [ -n "$SSH_TTY" ] && export PROMPT="${os_icon}%B%(?..[%?] )%b%n@%U%m%u %# "
else
  eval "$(starship init zsh)"
fi

# zsh suggestion highlight
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=4'

# zsh completion features
fpath+=${XDG_CONFIG_HOME}/.zfunc
autoload -Uz compinit
compinit -d ~/.cache/zcompdump
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' rehash true
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl false
zstyle ':completion:*' verbose true
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'

# zsh edit command line via vi
autoload -z edit-command-line
zle -N edit-command-line
bindkey "^V^E" edit-command-line

# zsh history configuration
export HISTFILE=${XDG_CONFIG_HOME}/.zsh_history
export HISTSIZE=99999
export SAVEHIST=99999
export HISTTIMEFORMAT="[%F %T] "

setopt hist_expire_dups_first   # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups         # ignore continous duplicated commands history list
setopt hist_ignore_all_dups     # ignore duplicated commands history list
setopt hist_ignore_space        # ignore commands that start with space
setopt hist_save_no_dups        # do not save duplicates
setopt hist_find_no_dups        # do not find duplicates
setopt hist_verify              # show command with history expansion to user before running it
setopt inc_append_history_time  # append history incrementally

# zsh keybindings configuration
# Use emacs keybindings even if our EDITOR is set to vi
bindkey -e
## for jetbrains embedded terminal
bindkey 'ƒ' forward-word
bindkey '∫' backward-word
bindkey '∂' kill-word

# >>> shared customization >>>"
export ZPLUG_HOME="${XDG_CONFIG_HOME}/zplug"
source "${ZPLUG_HOME}/init.zsh"
zplug "marlonrichert/zsh-autocomplete", as:plugin
zplug "paulirish/git-open", as:plugin
zplug "plugins/z", from:oh-my-zsh
zplug "plugins/wd", from:oh-my-zsh
zplug "plugins/git", from:oh-my-zsh
zplug "plugins/docker", from:oh-my-zsh
zplug "zsh-users/zsh-syntax-highlighting"
zplug "zsh-users/zsh-autosuggestions"

# zplug check returns true if all packages are installed
# Therefore, when it returns false, run zplug install
if ! zplug check; then
    zplug install
fi

# source plugins and add commands to the PATH
zplug load

## configuration for autocomplete
# Make Tab go straight to the menu and cycle there
bindkey '\t' menu-select "$terminfo[kcbt]" menu-select
bindkey -M menuselect '\t' menu-complete "$terminfo[kcbt]" reverse-menu-complete

# Reset history key bindings to Zsh default
() {
   local -a prefix=( '\e'{\[,O} )
   local -a up=( ${^prefix}A ) down=( ${^prefix}B )
   local key=
   for key in $up[@]; do
      bindkey "$key" up-line-or-history
   done
   for key in $down[@]; do
      bindkey "$key" down-line-or-history
   done
   bindkey -M emacs '^N' down-line-or-history
   bindkey -M emacs '^P' up-line-or-history
}

# zsh plugin z cache file
export _Z_DATA=~/.cache/z
# <<< shared customization <<<"
